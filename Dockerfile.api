# Multi-stage Dockerfile for Guardian API Service
# Stage 1: Builder
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git

WORKDIR /app

# Copy package files
COPY guardian-api/package*.json ./

# Install all dependencies (including dev)
RUN npm ci

# Copy source code
COPY guardian-api .
COPY frameworks ../frameworks
COPY policies ../policies

# Build TypeScript if needed
RUN if [ -f "tsconfig.json" ]; then npm run build; fi

# Prune dev dependencies
RUN npm prune --production

# Stage 2: Production
FROM node:20-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    && apk upgrade --no-cache \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S guardian && \
    adduser -u 1001 -S guardian -G guardian

WORKDIR /app

# Copy application from builder
COPY --from=builder --chown=guardian:guardian /app/node_modules ./node_modules
COPY --from=builder --chown=guardian:guardian /app ./
COPY --from=builder --chown=guardian:guardian /frameworks ../frameworks
COPY --from=builder --chown=guardian:guardian /policies ../policies

# Build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Set environment variables
ENV NODE_ENV=production \
    PORT=8080 \
    HOST=0.0.0.0 \
    LOG_LEVEL=info

# Add metadata labels
LABEL org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.title="Guardian API" \
      org.opencontainers.image.description="Guardian Security Platform API Service" \
      org.opencontainers.image.vendor="Guardian Security"

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Switch to non-root user
USER guardian

# Expose port
EXPOSE 8080

# Start the application
CMD ["node", "server.js"]