name: Continuous Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: registry.digitalocean.com
  REGISTRY_NAMESPACE: guardian-security
  NODE_VERSION: '20.x'
  RUST_VERSION: '1.75'

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      backend-tag: ${{ steps.meta.outputs.backend-tag }}
      frontend-tag: ${{ steps.meta.outputs.frontend-tag }}
      api-tag: ${{ steps.meta.outputs.api-tag }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate build metadata
        id: meta
        run: |
          SHA_SHORT=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "backend-tag=sha-${SHA_SHORT}-${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "frontend-tag=sha-${SHA_SHORT}-${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "api-tag=sha-${SHA_SHORT}-${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "sha-short=${SHA_SHORT}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 1200
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/guardian-backend:${{ steps.meta.outputs.backend-tag }}
            ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/guardian-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ steps.meta.outputs.timestamp }}
            VCS_REF=${{ steps.meta.outputs.sha-short }}
            VERSION=${{ steps.meta.outputs.backend-tag }}
            
      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/guardian-frontend:${{ steps.meta.outputs.frontend-tag }}
            ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/guardian-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ steps.meta.outputs.timestamp }}
            VCS_REF=${{ steps.meta.outputs.sha-short }}
            VERSION=${{ steps.meta.outputs.frontend-tag }}
            NEXT_PUBLIC_API_URL=${{ secrets.API_URL }}
            
      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.api
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/guardian-api:${{ steps.meta.outputs.api-tag }}
            ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/guardian-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ steps.meta.outputs.timestamp }}
            VCS_REF=${{ steps.meta.outputs.sha-short }}
            VERSION=${{ steps.meta.outputs.api-tag }}
            
      - name: Run vulnerability scan on images
        run: |
          doctl registry repository list-tags guardian-backend --format Tag,CompressedSizeBytes,UpdatedAt
          doctl registry repository list-tags guardian-frontend --format Tag,CompressedSizeBytes,UpdatedAt
          doctl registry repository list-tags guardian-api --format Tag,CompressedSizeBytes,UpdatedAt

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      - name: Check/Create VPC
        id: vpc
        run: |
          VPC_ID=$(doctl vpcs list --format ID,Name --no-header | grep "guardian-vpc" | awk '{print $1}' || true)
          if [ -z "$VPC_ID" ]; then
            echo "Creating new VPC..."
            VPC_ID=$(doctl vpcs create \
              --name guardian-vpc \
              --region nyc3 \
              --ip-range "10.10.0.0/16" \
              --description "Guardian Security Platform VPC" \
              --format ID --no-header)
          fi
          echo "vpc-id=${VPC_ID}" >> $GITHUB_OUTPUT
          
      - name: Check/Create Database
        id: database
        run: |
          DB_ID=$(doctl databases list --format ID,Name --no-header | grep "guardian-db" | awk '{print $1}' || true)
          if [ -z "$DB_ID" ]; then
            echo "Creating new database cluster..."
            DB_ID=$(doctl databases create guardian-db \
              --engine pg \
              --version 15 \
              --size db-s-1vcpu-1gb \
              --num-nodes 1 \
              --region nyc3 \
              --private-network-uuid ${{ steps.vpc.outputs.vpc-id }} \
              --format ID --no-header)
            
            echo "Waiting for database to be ready..."
            doctl databases wait $DB_ID
            
            echo "Creating guardian database..."
            doctl databases db create $DB_ID guardian
            
            echo "Creating guardian user..."
            doctl databases user create $DB_ID guardian --format Name --no-header
          fi
          
          CONNECTION_STRING=$(doctl databases connection $DB_ID --format URI --no-header)
          echo "::add-mask::${CONNECTION_STRING}"
          echo "database-id=${DB_ID}" >> $GITHUB_OUTPUT
          echo "connection-string=${CONNECTION_STRING}" >> $GITHUB_OUTPUT
          
      - name: Configure firewall rules
        run: |
          FW_ID=$(doctl compute firewall list --format ID,Name --no-header | grep "guardian-firewall" | awk '{print $1}' || true)
          if [ -z "$FW_ID" ]; then
            echo "Creating firewall..."
            doctl compute firewall create \
              --name guardian-firewall \
              --inbound-rules "protocol:tcp,ports:443,sources:0.0.0.0/0,sources:::/0" \
              --inbound-rules "protocol:tcp,ports:80,sources:0.0.0.0/0,sources:::/0" \
              --outbound-rules "protocol:tcp,ports:all,destinations:0.0.0.0/0,destinations:::/0" \
              --outbound-rules "protocol:udp,ports:all,destinations:0.0.0.0/0,destinations:::/0"
          fi

  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-infrastructure]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      - name: Update App Platform spec
        run: |
          sed -i "s/BACKEND_TAG/${{ needs.build-and-push.outputs.backend-tag }}/g" app-spec.yml
          sed -i "s/FRONTEND_TAG/${{ needs.build-and-push.outputs.frontend-tag }}/g" app-spec.yml
          sed -i "s/API_TAG/${{ needs.build-and-push.outputs.api-tag }}/g" app-spec.yml
          
      - name: Deploy to App Platform
        run: |
          APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "guardian-platform" | awk '{print $1}' || true)
          if [ -z "$APP_ID" ]; then
            echo "Creating new app..."
            APP_ID=$(doctl apps create --spec app-spec.yml --format ID --no-header)
          else
            echo "Updating existing app..."
            doctl apps update $APP_ID --spec app-spec.yml
          fi
          
          echo "Waiting for deployment to complete..."
          doctl apps create-deployment $APP_ID --wait
          
      - name: Get application URL
        id: app-url
        run: |
          APP_URL=$(doctl apps get guardian-platform --format LiveURL --no-header)
          echo "Application deployed to: ${APP_URL}"
          echo "app-url=${APP_URL}" >> $GITHUB_OUTPUT
          
      - name: Run smoke tests
        run: |
          echo "Waiting for application to be ready..."
          sleep 30
          
          echo "Running health checks..."
          curl -f https://${{ steps.app-url.outputs.app-url }}/api/health || exit 1
          curl -f https://${{ steps.app-url.outputs.app-url }} || exit 1
          
      - name: Send deployment notification
        if: success()
        run: |
          echo "Deployment successful!"
          echo "Application URL: https://${{ steps.app-url.outputs.app-url }}"
          echo "Backend version: ${{ needs.build-and-push.outputs.backend-tag }}"
          echo "Frontend version: ${{ needs.build-and-push.outputs.frontend-tag }}"
          echo "API version: ${{ needs.build-and-push.outputs.api-tag }}"
          
      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "guardian-platform" | awk '{print $1}')
          if [ ! -z "$APP_ID" ]; then
            PREVIOUS_DEPLOYMENT=$(doctl apps list-deployments $APP_ID --format ID --no-header | sed -n 2p)
            if [ ! -z "$PREVIOUS_DEPLOYMENT" ]; then
              doctl apps create-deployment $APP_ID --previous-deployment-id $PREVIOUS_DEPLOYMENT --wait
            fi
          fi

  cleanup:
    name: Cleanup Old Resources
    runs-on: ubuntu-latest
    needs: deploy-application
    if: success()
    
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      - name: Clean old container images
        run: |
          echo "Cleaning images older than 7 days..."
          
          for REPO in guardian-backend guardian-frontend guardian-api; do
            echo "Processing $REPO..."
            TAGS=$(doctl registry repository list-tags $REPO --format Tag,UpdatedAt --no-header | \
              awk -v date="$(date -d '7 days ago' +%s)" '$2 < date {print $1}' || true)
            
            if [ ! -z "$TAGS" ]; then
              for TAG in $TAGS; do
                if [[ "$TAG" != "latest" ]]; then
                  echo "Deleting $REPO:$TAG"
                  doctl registry repository delete-tag $REPO $TAG --force || true
                fi
              done
            fi
          done
          
      - name: Run garbage collection
        run: |
          doctl registry garbage-collection start --force || true